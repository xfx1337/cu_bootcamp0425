import os
import random
import string
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import db

import replies
import botstates
import keyboards
from ai.yandex_ai import Psychologist, Analyzer

import test_utils
from test_utils import STRESS_WORDS


load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
admin_chat_id = os.getenv("ADMIN_CHAT_ID")
if not BOT_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.")

from create_bot import bot, dp
from aiogram import types

psycho_ai = {}
ai = {}
ask_answers = {}
async def create_physicol(user_id):
    global psycho_ai
    if user_id in psycho_ai:
        psycho_ai[user_id].clear()
        return
    psycho_ai[user_id] = Psychologist()
    psycho_ai[user_id] = await psycho_ai[user_id].init()

async def create_ai(user_id):
    global ai
    if user_id in ai:
        ai[user_id].clear()
        return
    ai[user_id] = await Analyzer().init("""–¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é –≤ –≤—É–∑. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ–¥–Ω–æ–º—É, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –≤—ã–±–æ—Ä–æ–º. –°–ª–µ–¥—É–π —Å—Ö–µ–º–µ:

–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: ¬´–ö–∞–∫—É—é —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ? –ù–∞–ø—Ä–∏–º–µ—Ä, IT, –º–µ–¥–∏—Ü–∏–Ω–∞, –∏–Ω–∂–µ–Ω–µ—Ä–∏—è¬ª 
–ë–∞–ª–ª—ã –ï–ì–≠: ¬´–ö–∞–∫–∏–µ —ç–∫–∑–∞–º–µ–Ω—ã –≤—ã —Å–¥–∞—ë—Ç–µ –∏ –∫–∞–∫–æ–π –ø—Ä–∏–º–µ—Ä–Ω—ã–π –±–∞–ª–ª –æ–∂–∏–¥–∞–µ—Ç–µ?¬ª 
–õ–æ–∫–∞—Ü–∏—è: ¬´–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ/—Ä–µ–≥–∏–æ–Ω–µ —Ö–æ—Ç–∏—Ç–µ —É—á–∏—Ç—å—Å—è?¬ª
–ë—é–¥–∂–µ—Ç/–ø–ª–∞—Ç–Ω–æ–µ: ¬´–í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –±—é–¥–∂–µ—Ç–Ω—ã–µ –º–µ—Å—Ç–∞ –∏–ª–∏ –≥–æ—Ç–æ–≤—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?¬ª
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: ¬´–í–∞–∂–Ω—ã –ª–∏ —Å—Ç–∏–ø–µ–Ω–¥–∏–∏, –ø—Ä–∞–∫—Ç–∏–∫–∏¬ª""", memory=True)


db.init_db()

TRANS = {
    "russian": "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
    "literature": "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
    "profmat": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ø—Ä–æ—Ñ.",
    "basemat": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –±–∞–∑–∞",
    "chem": "–•–∏–º–∏—è",
    "geo": "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è",
    "obsh": "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ",
    "inf": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
    "history": "–ò—Å—Ç–æ—Ä–∏—è",
    "phys": "–§–∏–∑–∏–∫–∞",
    "bio": "–ë–∏–æ–ª–æ–≥–∏—è",
    "foreign": "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫"
}

#start
@dp.message(Command("start"))
async def send_welcome(message: types.Message, state: FSMContext):
    if db.check_subjects(message.from_user.id):
        await message.answer(f"–¢–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=keyboards.main_menu_keyboard)
        return await state.set_state(botstates.MainMenuStates.main)
    first_name = message.from_user.first_name
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –≤—ã–±–æ—Ä–µ –≤—É–∑–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –∫–æ—Ä–æ—Ç–∫–æ–π –∞–Ω–∫–µ—Ç—ã, —á—Ç–æ–±—ã —è –ø–æ–Ω—è–ª, –∫–∞–∫ —Ç–µ–±–µ –ø–æ–º–æ—á—å! üéì\n\n –ö–∞–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Ç—ã —Å–¥–∞—ë—à—å? –ö–æ–≥–¥–∞ –≤—ã–±–µ—Ä–µ—à—å, –Ω–∞–∂–º–∏ '–Ø –≤—ã–±—Ä–∞–ª'", reply_markup=keyboards.create_subjects())
    db.register_user(int(message.chat.id), first_name)
    await state.set_state(botstates.RegistrationStates.waiting_for_subjects)

@dp.callback_query(lambda call: call.data == "subscription")
async def process_subjects(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer("–°–µ–≥–æ–¥–Ω—è –≤ —á–µ—Å—Ç—å –≠–ö–°–ü–û - –ø–æ–¥–ø–∏—Å–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∏ –µ—ë –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–ª–∏—Ç—å. –í—Å—ë —Ä–∞–¥–∏ –≤–∞—Åüíò", True)

@dp.callback_query(lambda call: call.data == "edit_subjects")
async def process_subjects(callback_query: types.CallbackQuery, state: FSMContext):
    db.delete_subjects(callback_query.from_user.id)
    await callback_query.message.edit_text("–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –≤—ã–±–æ—Ä–µ –≤—É–∑–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –∫–æ—Ä–æ—Ç–∫–æ–π –∞–Ω–∫–µ—Ç—ã, —á—Ç–æ–±—ã —è –ø–æ–Ω—è–ª, –∫–∞–∫ —Ç–µ–±–µ –ø–æ–º–æ—á—å! üéì\n\n –ö–∞–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Ç—ã —Å–¥–∞—ë—à—å? –ö–æ–≥–¥–∞ –≤—ã–±–µ—Ä–µ—à—å, –Ω–∞–∂–º–∏ '–Ø –≤—ã–±—Ä–∞–ª'", reply_markup=keyboards.create_subjects())
    await state.set_state(botstates.RegistrationStates.waiting_for_subjects)

@dp.callback_query(botstates.RegistrationStates.waiting_for_subjects)
async def process_subjects(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    data_got = await state.get_data()
    data_got["userid"] = callback_query.from_user.id
    if "subjects" not in data_got:
        data_got["subjects"] = []
    if data != "done":
        if data in data_got["subjects"]:
            data_got["subjects"].remove(data)
            await callback_query.answer(f"–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–±–æ—Ä: {TRANS[data]}")
        else:
            data_got["subjects"].append(data)
            await callback_query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {TRANS[data]}")
        if data in ["profmat", "basemat"]:
            if data == "profmat" and "basemat" in data_got["subjects"]:
                data_got["subjects"].remove("basemat")
            elif data == "basemat" and "profmat" in data_got["subjects"]:
                data_got["subjects"].remove("profmat")
        await callback_query.message.edit_text("–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –≤—ã–±–æ—Ä–µ –≤—É–∑–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –∫–æ—Ä–æ—Ç–∫–æ–π –∞–Ω–∫–µ—Ç—ã, —á—Ç–æ–±—ã —è –ø–æ–Ω—è–ª, –∫–∞–∫ —Ç–µ–±–µ –ø–æ–º–æ—á—å! üéì\n\n –ö–∞–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Ç—ã —Å–¥–∞—ë—à—å? –ö–æ–≥–¥–∞ –≤—ã–±–µ—Ä–µ—à—å, –Ω–∞–∂–º–∏ '–Ø –≤—ã–±—Ä–∞–ª'", reply_markup=keyboards.create_subjects(data_got["subjects"]))
    await state.update_data(data_got)
    if data=="done":
        db.register_subjects(data_got["userid"], data_got["subjects"])
        await callback_query.message.answer(f"–ú–æ–ª–æ–¥–µ—Ü! –ü–æ—Ä–∞ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ", reply_markup=keyboards.main_menu_keyboard)
        await state.set_state(botstates.MainMenuStates.main)
        await callback_query.message.delete()

@dp.message(lambda message: message.text in ["–ü–æ–º–æ—â—å —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–ºüîí", "–ü–æ–º–æ—â—å —Å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—èüîí"])
async def main_menu(message: types.Message, state: FSMContext):
    await message.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. . .")

@dp.message(lambda message: message.text.lower() in ["–ø—Å–∏—Ö–æ–ª–æ–≥üë©üèª‚Äç‚öïÔ∏è", "–∞–∫–∫–∞—É–Ω—Çüí≥", "–ø–æ–º–æ—â—å —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏‚úÖ", "—Ç—Ä–µ–Ω–∞–∂—ë—Ä—ãüöÄ"])
async def main_menu(message: types.Message, state: FSMContext):
    if message.text.lower() == "–ø—Å–∏—Ö–æ–ª–æ–≥üë©üèª‚Äç‚öïÔ∏è":
        msg = await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
        await create_physicol(message.from_user.id)
        await msg.edit_text("–û–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –∏ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ–∫–∞–∂–µ—Ç —Ç–µ–±–µ –º–æ—Ä–∞–ª—å–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ–∞–Ω—Å –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏–∏, –Ω–∞–ø–∏—à–∏ /stop")
        await state.set_state(botstates.MainMenuStates.psycho)

    if message.text.lower() == "—Ç—Ä–µ–Ω–∞–∂—ë—Ä—ãüöÄ":
        await message.answer("üöÄ–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∞–∂—ë—Ä –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö", reply_markup=keyboards.tests_keyboard)
        await state.set_state(botstates.MainMenuStates.tests)

    if message.text.lower() == "–ø–æ–º–æ—â—å —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏‚úÖ":
        await message.answer("""üåü <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –ø–æ–¥–±–æ—Ä–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏!</b> üåü

–ß—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è —Ç–µ–±—è –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ <b>7 –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤</b>. 

üöÄ <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>
1. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á–µ—Å—Ç–Ω–æ
2. –ù–µ –∑–∞–¥–µ—Ä–∂–∏–≤–∞–π—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –Ω–∞–¥ –æ—Ç–≤–µ—Ç–∞–º–∏
3. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã

‚ö†Ô∏è <b>–•–æ—á–µ—à—å –ø—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ—Å—Ç?</b>
- –ù–∞–ø–∏—à–∏ "–°—Ç–æ–ø" –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
- –ò–ª–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å" –¥–ª—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ –∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è ‚úÖ

–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –¢–æ–≥–¥–∞ –ø–æ–µ—Ö–∞–ª–∏! üöÄ""")
        msg = await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏. . .")
        await create_ai(message.from_user.id)
        await msg.edit_text("–ü–æ–¥–±–æ—Ä –≤–æ–ø—Ä–æ—Å–∞. . .")
        try:
            await msg.edit_text(await ai[message.from_user.id].question(f"–ß–µ–ª–æ–≤–µ–∫ –æ—Ç–≤–µ—Ç–∏–ª: {message.text}\n–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –µ–º—É –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"))
        except Exception as e:
            print(e)
            await msg.edit_text("–ü—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ YandexGPT")
        await state.set_state(botstates.Choice.q)
    if message.text == "–ê–∫–∫–∞—É–Ω—Çüí≥":
        subjects_mass = db.get_subjects(message.from_user.id)
        subjects = ""
        for item in subjects_mass:
            subjects += TRANS[item["subject"]] + ", "
        subjects = subjects[:-2]
        await message.answer(f"""
        üÜî–í–∞—à id telegram: {message.from_user.id}
‚≠êÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ:
 ‚îú –¢–∏–ø: Pro
 ‚îú –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞: 19.04.2025
 ‚îú –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: 20.04.2025
 ‚îú –ö—É–ø–ª–µ–Ω–∞ –ø–æ —Ü–µ–Ω–µ: 0‚≠êÔ∏è/–º–µ—Å—è—Ü
 ‚îî –ê–∫—Ü–∏—è: –ü—Ä–∏–º–µ–Ω—è–ª–∞—Å—å

–í—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–º–∏ –ø—Ä–µ–¥–º–µ—Ç—ã: {subjects}
        """, reply_markup=keyboards.profile)

    if message.text in ["–¢—Ä–µ–Ω–∞–∂—ë—Ä—ãüîí", "–ü–æ–º–æ—â—å —Å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—èüîí", "–ü–æ–º–æ—â—å —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–ºüîí"]:
        await message.answer("–ï—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ‚úÖ")

@dp.message(botstates.MainMenuStates.tests)
async def tests_choice(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ä—Ñ–æ—ç–ø–∏—è":
        await state.set_state(botstates.Tests.rus_orfoepia)
        word = test_utils.get_stress_word()
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º —É–¥–∞—Ä–µ–Ω–∏–µ–º, –æ—Ç–º–µ—Ç–∏–≤ —É–¥–∞—Ä–µ–Ω–∏–µ –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤–æ–π: \n\n" + word.lower() 
        + "\n\n –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –Ω–∞–ø–∏—à–∏—Ç–µ '–°—Ç–æ–ø'")
        await state.update_data(current_word=word)
    else:
        await state.set_state(botstates.MainMenuStates.main)
        await message.answer("–ï—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ‚úÖ", reply_markup=keyboards.main_menu_keyboard)

@dp.message(botstates.Tests.rus_orfoepia)
async def rus_orfoepia_test(message: types.Message, state: FSMContext):
    data = await state.get_data()
    word = test_utils.get_stress_word()
    if message.text == None:
        cword = data["current_word"]
        await message.answer(f"–ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ: <b>{cword}</b>\n –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ: <b>" + word.lower() + "</b>")
        return
    if message.text in STRESS_WORDS and message.text.lower() == data["current_word"].lower():
        await message.answer("–í–µ—Ä–Ω–æ! \n –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ: " + word.lower())
    elif message.text.lower() == "—Å—Ç–æ–ø":
        await state.set_state(botstates.MainMenuStates.main)
        await message.answer("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–æ–Ω—á–µ–Ω–æ", reply_markup=keyboards.main_menu_keyboard)
    else:
        cword = data["current_word"]
        await message.answer(f"–ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ: {cword}\n –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ: " + word.lower())
    data["current_word"] = word
    await state.update_data(data)
        

@dp.message(botstates.Choice.q)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º message –≤–º–µ—Å—Ç–æ callback_query
async def choice1(message: types.Message, state: FSMContext):
    if message.text.lower() == "—Å—Ç–æ–ø":
        await state.set_state(botstates.MainMenuStates.main)
        return await message.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    if message.text.lower() == "–∑–∞–≤–µ—Ä—à–∏—Ç—å":
        return await askainow(message, state)
    msg = await message.answer("–ü–æ–¥–±–æ—Ä –≤–æ–ø—Ä–æ—Å–∞. . .")
    if ai[message.from_user.id].message_count >= 6:
        await state.set_state(botstates.Choice.AskAI)
    try:
        await msg.edit_text(await ai[message.from_user.id].question(f"–ß–µ–ª–æ–≤–µ–∫ –æ—Ç–≤–µ—Ç–∏–ª: {message.text}\n–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –µ–º—É –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"))
    except Exception as e:
        print(e)
        await msg.edit_text("–ü—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ YandexGPT")


@dp.message(botstates.Choice.AskAI)
async def askainow(message: types.Message, state:FSMContext):
    msg = await message.answer("–ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–æ–≤...")
    subjects_mass = db.get_subjects(message.from_user.id)
    subjects = ""
    for item in subjects_mass:
        subjects += TRANS[item["subject"]] + ", "
    subjects = subjects[:-2]
    answer = await ai[message.from_user.id].question(f"–ß–µ–ª–æ–≤–µ–∫ –æ—Ç–≤–µ—Ç–∏–ª: {message.text}. –¢–∞–∫–∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö —á–µ–ª–æ–≤–µ–∫–∞: {subjects}. –í—Å—ë, –≤—ã–¥–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∫–∞–∫–∏–µ –≤—É–∑—ã –ø–æ–¥—Ö–æ–¥—è—Ç.",
                               "llama")
    await msg.edit_text(answer)
    await message.answer("–ï—Å–ª–∏ —É —Ç–µ–±—è –±—É–¥–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ, –∑–∞–¥–∞–π –∏—Ö –ø—Å–∏—Ö–æ–ª–æ–≥—É", reply_markup=keyboards.main_menu_keyboard)
    await state.set_state(botstates.MainMenuStates.main)


@dp.message(botstates.MainMenuStates.psycho)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º message –≤–º–µ—Å—Ç–æ callback_query
async def psycho(message: types.Message, state: FSMContext):
    if message.text == "/stop":
        await message.answer("–°–µ–∞–Ω—Å –∑–∞–∫–æ–Ω—á–µ–Ω", reply_markup=keyboards.main_menu_keyboard)
        await state.set_state(botstates.MainMenuStates.main)
    else:
        msg = await message.answer("–û–±–¥—É–º—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å. . .")
        try:
            await msg.edit_text(await psycho_ai[message.from_user.id].user_ask(message.text))
        except:
            await message.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ—à—ë–ª —Ü–µ–Ω–∑—É—Ä—É, –ø—Ä–æ—Å—Ç–∏—Ç–µ")




# back worjk
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio

    asyncio.run(main())