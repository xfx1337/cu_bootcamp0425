import os
import random
import string
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import db

import replies
import botstates
import keyboards
from ai.yandex_ai import Psychologist, Analyzer

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
admin_chat_id = os.getenv("ADMIN_CHAT_ID")
if not BOT_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.")

from create_bot import bot, dp

psycho_ai = Psychologist()
ai = Analyzer("–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –≤—ã–±–æ—Ä—É –≤—É–∑–∞. –ü–æ–º–æ–≥–∏ —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")

db.init_db()

TRANS = {
    "russian": "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
    "literature": "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
    "profmat": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—å",
    "basemat": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –±–∞–∑–æ–≤–∞—è",
    "chem": "–•–∏–º–∏—è",
    "geo": "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è",
    "obsh": "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ",
    "inf": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
    "history": "–ò—Å—Ç–æ—Ä–∏—è",
    "phys": "–§–∏–∑–∏–∫–∞",
    "bio": "–ë–∏–æ–ª–æ–≥–∏—è",
    "foreign": "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫"
}

#start
@dp.message(Command("start"))
async def send_welcome(message: types.Message, state: FSMContext):
    first_name = message.from_user.first_name
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –≤—ã–±–æ—Ä–µ –≤—É–∑–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –∫–æ—Ä–æ—Ç–∫–æ–π –∞–Ω–∫–µ—Ç—ã, —á—Ç–æ–±—ã —è –ø–æ–Ω—è–ª, –∫–∞–∫ —Ç–µ–±–µ –ø–æ–º–æ—á—å! üéì\n\n –ö–∞–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Ç—ã —Å–¥–∞—ë—à—å? –ö–æ–≥–¥–∞ –≤—ã–±–µ—Ä–µ—à—å, –Ω–∞–∂–º–∏ '–Ø –≤—ã–±—Ä–∞–ª'", reply_markup=keyboards.create_subjects())
    db.register_user(int(message.chat.id), first_name)
    await state.set_state(botstates.RegistrationStates.waiting_for_subjects)

# get user in db
@dp.message(lambda message: message.contact is not None)
async def handle_contact(message: types.Message, state: FSMContext):
    contact = message.contact
    username = message.from_user.username if message.from_user.username else contact.phone_number
    first_name = contact.first_name
    second_name = contact.last_name if contact.last_name else ""
    await state.update_data(
        username=username,
        first_name=first_name,
        second_name=second_name,
        phone_num=contact.phone_number,
        userid=int(message.chat.id)
    )
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ö–∞–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Ç—ã —Å–¥–∞—ë—à—å? –ö–æ–≥–¥–∞ –≤—ã–±–µ—Ä–µ—à—å, –Ω–∞–∂–º–∏ '–Ø –≤—ã–±—Ä–∞–ª' ‚ùì", reply_markup=keyboards.subjects)
    db.register_user(int(message.chat.id), first_name)
    await state.set_state(botstates.RegistrationStates.waiting_for_subjects)

@dp.callback_query(botstates.RegistrationStates.waiting_for_subjects)
async def process_subjects(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    data_got = await state.get_data()
    data_got["userid"] = callback_query.from_user.id
    if "subjects" not in data_got:
        data_got["subjects"] = []
    if data == 'yes':
        return await callback_query.answer("–£–∂–µ –≤—ã–±—Ä–∞–Ω–æ!")
    if data != "done":
        if data in data_got["subjects"]:
            return
        data_got["subjects"].append(data)
        await callback_query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {TRANS[data]}")
        await callback_query.message.edit_text("–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –≤—ã–±–æ—Ä–µ –≤—É–∑–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –∫–æ—Ä–æ—Ç–∫–æ–π –∞–Ω–∫–µ—Ç—ã, —á—Ç–æ–±—ã —è –ø–æ–Ω—è–ª, –∫–∞–∫ —Ç–µ–±–µ –ø–æ–º–æ—á—å! üéì\n\n –ö–∞–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Ç—ã —Å–¥–∞—ë—à—å? –ö–æ–≥–¥–∞ –≤—ã–±–µ—Ä–µ—à—å, –Ω–∞–∂–º–∏ '–Ø –≤—ã–±—Ä–∞–ª'", reply_markup=keyboards.create_subjects(data_got["subjects"]))
    await state.update_data(data_got)
    if data=="done":
        db.register_subjects(data_got["userid"], data_got["subjects"])
        await callback_query.message.answer(f"–ú–æ–ª–æ–¥–µ—Ü! –ü–æ—Ä–∞ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ", reply_markup=keyboards.main_menu_keyboard)
        await state.set_state(botstates.MainMenuStates.main)

@dp.message(lambda message: message.text in ["–ü—Å–∏—Ö–æ–ª–æ–≥üë©üèª‚Äç‚öïÔ∏è", "–ê–∫–∫–∞—É–Ω—Çüí≥", "–ü–æ–º–æ—â—å —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏‚úÖ"])
async def main_menu(message: types.Message, state: FSMContext):
    if message.text == "–ü—Å–∏—Ö–æ–ª–æ–≥üë©üèª‚Äç‚öïÔ∏è":
        await message.answer("–û–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –∏ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ–∫–∞–∂–µ—Ç —Ç–µ–±–µ –º–æ—Ä–∞–ª—å–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ–∞–Ω—Å –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏–∏, –Ω–∞–ø–∏—à–∏ /stop")
        await state.set_state(botstates.MainMenuStates.psycho)

    if message.text == "–ü–æ–º–æ—â—å —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏‚úÖ":
        await message.answer("–ß—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å, –Ω–∞–º –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
        await message.answer("–ö–∞–∫–∞—è –∫–∞—Ä—å–µ—Ä–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –≤–∞—Å –±–æ–ª—å—à–µ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç?")
        await state.set_state(botstates.Choice.q1)
    if message.text == "–ê–∫–∫–∞—É–Ω—Çüí≥":
        await message.answer(f"""
        üÜî–í–∞—à id telegram: {message.chat.id}
‚≠êÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ:
 ‚îú –¢–∏–ø: Pro
 ‚îú –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞: 2025-04-18
 ‚îú –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: 2025-05-18
 ‚îú –ö—É–ø–ª–µ–Ω–∞ –ø–æ —Ü–µ–Ω–µ: 0‚≠êÔ∏è/–º–µ—Å—è—Ü
 ‚îî –ê–∫—Ü–∏—è: –ü—Ä–∏–º–µ–Ω—è–ª–∞—Å—å
        """)

    if message.text in ["–¢—Ä–µ–Ω–∞–∂—ë—Ä—ãüîí", "–ü–æ–º–æ—â—å —Å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—èüîí", "–ü–æ–º–æ—â—å —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–ºüîí"]:
        await message.answer("–ï—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ‚úÖ")

@dp.message(botstates.Choice.q1)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º message –≤–º–µ—Å—Ç–æ callback_query
async def choice1(message: types.Message, state: FSMContext):
    data_got = await state.get_data()
    data_got["q1"] = message.text
    await message.answer("–ö —á–µ–º—É —É –≤–∞—Å –±—ã–ª–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤ —à–∫–æ–ª–µ? –ï—Å–ª–∏ –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å, –≤—Å–ø–æ–º–Ω–∏—Ç–µ —Å–ª–æ–≤–∞ –æ–∫—Ä—É–∂–∞—é—â–∏—Ö –∏–ª–∏ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ.")
    await state.update_data(data_got)
    await state.set_state(botstates.Choice.q2)

@dp.message(botstates.Choice.q2)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º message –≤–º–µ—Å—Ç–æ callback_query
async def choice2(message: types.Message, state: FSMContext):
    data_got = await state.get_data()
    data_got["q2"] = message.text
    await message.answer("–í –∫–∞–∫–∏—Ö —Å—Ñ–µ—Ä–∞—Ö —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç, –æ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–∏—è—Ç–Ω–æ –≤—Å–ø–æ–º–Ω–∏—Ç—å?")
    await state.update_data(data_got)
    await state.set_state(botstates.Choice.q3)

@dp.message(botstates.Choice.q3)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º message –≤–º–µ—Å—Ç–æ callback_query
async def choice3(message: types.Message, state: FSMContext):
    data_got = await state.get_data()
    data_got["q3"] = message.text
    await message.answer("–ü–æ–¥–æ–∂–¥–∏, –∫–æ–≥–¥–∞ –ò–ò –ø–æ–¥–±–µ—Ä–µ—Ç —Ç–µ–±–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –º–µ—á—Ç—ã!")
    await state.update_data(data_got)
    await state.set_state(botstates.Choice.AskAI)
    await askainow(message, state)  # –Ø–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é

@dp.message(botstates.Choice.AskAI)
async def askainow(message: types.Message, state:FSMContext):
    data_got = await state.get_data()
    data_got["q3"] = message.text
    a1 = data_got["q1"]
    a2 = data_got["q2"]
    a3 = data_got["q3"]
    got = f"""
    –ö–∞–∫–∞—è –∫–∞—Ä—å–µ—Ä–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –≤–∞—Å –±–æ–ª—å—à–µ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç?
    –û—Ç–≤–µ—Ç: {a1}
    –ö —á–µ–º—É —É –≤–∞—Å –±—ã–ª–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤ —à–∫–æ–ª–µ? –ï—Å–ª–∏ –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å, –≤—Å–ø–æ–º–Ω–∏—Ç–µ —Å–ª–æ–≤–∞ –æ–∫—Ä—É–∂–∞—é—â–∏—Ö –∏–ª–∏ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ.
    –û—Ç–≤–µ—Ç: {a2}
    –í –∫–∞–∫–∏—Ö —Å—Ñ–µ—Ä–∞—Ö —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç, –æ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–∏—è—Ç–Ω–æ –≤—Å–ø–æ–º–Ω–∏—Ç—å?
    –û—Ç–≤–µ—Ç: {a3}
    """ 
    answer = ai.question(got)

    await message.answer(answer)
    await message.answer("–ï—Å–ª–∏ —É —Ç–µ–±—è –±—É–¥–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ, –∑–∞–¥–∞–π –∏—Ö –ø—Å–∏—Ö–æ–ª–æ–≥—É", reply_markup=keyboards.main_menu_keyboard)
    await state.set_state(botstates.MainMenuStates.main)


@dp.message(botstates.MainMenuStates.psycho)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º message –≤–º–µ—Å—Ç–æ callback_query
async def psycho(message: types.Message, state: FSMContext):
    if message.text == "/stop":
        await message.answer("–°–µ–∞–Ω—Å –∑–∞–∫–æ–Ω—á–µ–Ω", reply_markup=keyboards.main_menu_keyboard)
        await state.set_state(botstates.MainMenuStates.main)
    else:
        try:
            await message.answer(psycho_ai.user_ask(message.text))
        except:
            await message.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ—à—ë–ª —Ü–µ–Ω–∑—É—Ä—É, –ø—Ä–æ—Å—Ç–∏—Ç–µ")



# back worjk
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio

    asyncio.run(main())
